// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sw_compute_sw_compute_Pipeline_VITIS_LOOP_89_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        acc_address0,
        acc_ce0,
        acc_we0,
        acc_d0,
        acc_q0,
        acc_address1,
        acc_ce1,
        acc_we1,
        acc_d1,
        acc_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] acc_address0;
output   acc_ce0;
output   acc_we0;
output  [31:0] acc_d0;
input  [31:0] acc_q0;
output  [6:0] acc_address1;
output   acc_ce1;
output   acc_we1;
output  [31:0] acc_d1;
input  [31:0] acc_q1;

reg ap_idle;
reg[6:0] acc_address0;
reg acc_ce0;
reg acc_we0;
reg[6:0] acc_address1;
reg acc_ce1;
reg acc_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln89_reg_204;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [6:0] i_2_reg_199;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln89_fu_78_p2;
reg   [6:0] acc_addr_1_reg_208;
reg   [6:0] acc_addr_1_reg_208_pp0_iter1_reg;
reg   [6:0] acc_addr_1_reg_208_pp0_iter2_reg;
reg   [6:0] acc_addr_1_reg_208_pp0_iter3_reg;
reg  signed [31:0] acc_load_1_reg_217;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_107_p2;
reg   [31:0] mul_ln93_reg_222;
reg   [0:0] tmp_1_reg_227;
reg   [15:0] trunc_ln93_2_reg_232;
wire   [16:0] select_ln93_fu_158_p3;
reg   [16:0] select_ln93_reg_237;
wire   [0:0] icmp_ln95_fu_175_p2;
reg   [0:0] icmp_ln95_reg_242;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] i_2_cast_fu_84_p1;
wire    ap_block_pp0_stage0;
reg   [6:0] i_fu_48;
wire   [6:0] add_ln89_fu_97_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_2;
wire   [0:0] tmp_fu_89_p3;
wire    ap_block_pp0_stage1;
wire   [9:0] grp_fu_107_p1;
wire   [31:0] sub_ln93_fu_130_p2;
wire   [15:0] trunc_ln93_1_fu_135_p4;
wire   [16:0] zext_ln93_fu_145_p1;
wire   [16:0] sub_ln93_1_fu_149_p2;
wire   [16:0] zext_ln93_1_fu_155_p1;
wire   [9:0] tmp_2_fu_165_p4;
wire   [16:0] select_ln95_fu_181_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

sw_compute_mul_32s_10ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 32 ))
mul_32s_10ns_32_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc_load_1_reg_217),
    .din1(grp_fu_107_p1),
    .ce(1'b1),
    .dout(grp_fu_107_p2)
);

sw_compute_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_48 <= 7'd32;
    end else if (((icmp_ln89_reg_204 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_48 <= add_ln89_fu_97_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_fu_78_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_addr_1_reg_208 <= i_2_cast_fu_84_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_addr_1_reg_208_pp0_iter1_reg <= acc_addr_1_reg_208;
        acc_addr_1_reg_208_pp0_iter2_reg <= acc_addr_1_reg_208_pp0_iter1_reg;
        acc_addr_1_reg_208_pp0_iter3_reg <= acc_addr_1_reg_208_pp0_iter2_reg;
        i_2_reg_199 <= ap_sig_allocacmp_i_2;
        icmp_ln89_reg_204 <= icmp_ln89_fu_78_p2;
        icmp_ln95_reg_242 <= icmp_ln95_fu_175_p2;
        select_ln93_reg_237 <= select_ln93_fu_158_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        acc_load_1_reg_217 <= acc_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        mul_ln93_reg_222 <= grp_fu_107_p2;
        tmp_1_reg_227 <= grp_fu_107_p2[32'd31];
        trunc_ln93_2_reg_232 <= {{grp_fu_107_p2[31:16]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        acc_address0 = acc_addr_1_reg_208_pp0_iter3_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_address0 = acc_addr_1_reg_208;
    end else begin
        acc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            acc_address1 = acc_addr_1_reg_208;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            acc_address1 = i_2_cast_fu_84_p1;
        end else begin
            acc_address1 = 'bx;
        end
    end else begin
        acc_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        acc_ce0 = 1'b1;
    end else begin
        acc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        acc_ce1 = 1'b1;
    end else begin
        acc_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        acc_we0 = 1'b1;
    end else begin
        acc_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln89_reg_204 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_fu_89_p3 == 1'd1))) begin
        acc_we1 = 1'b1;
    end else begin
        acc_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln89_reg_204 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 7'd32;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_48;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_d0 = $signed(select_ln95_fu_181_p3);

assign acc_d1 = 32'd0;

assign add_ln89_fu_97_p2 = (i_2_reg_199 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_107_p1 = 32'd402;

assign i_2_cast_fu_84_p1 = ap_sig_allocacmp_i_2;

assign icmp_ln89_fu_78_p2 = ((ap_sig_allocacmp_i_2 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_175_p2 = (($signed(tmp_2_fu_165_p4) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign select_ln93_fu_158_p3 = ((tmp_1_reg_227[0:0] == 1'b1) ? sub_ln93_1_fu_149_p2 : zext_ln93_1_fu_155_p1);

assign select_ln95_fu_181_p3 = ((icmp_ln95_reg_242[0:0] == 1'b1) ? 17'd127 : select_ln93_reg_237);

assign sub_ln93_1_fu_149_p2 = (17'd0 - zext_ln93_fu_145_p1);

assign sub_ln93_fu_130_p2 = (32'd0 - mul_ln93_reg_222);

assign tmp_2_fu_165_p4 = {{select_ln93_fu_158_p3[16:7]}};

assign tmp_fu_89_p3 = acc_q1[32'd31];

assign trunc_ln93_1_fu_135_p4 = {{sub_ln93_fu_130_p2[31:16]}};

assign zext_ln93_1_fu_155_p1 = trunc_ln93_2_reg_232;

assign zext_ln93_fu_145_p1 = trunc_ln93_1_fu_135_p4;

endmodule //sw_compute_sw_compute_Pipeline_VITIS_LOOP_89_5
